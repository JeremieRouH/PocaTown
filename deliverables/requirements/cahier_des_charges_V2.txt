			
				Améliorations Cahier des charges :


« Comment va t’on faire ? »
 

La ville est représentée par un tableau de cases, dont chaque case représente une unité de construction.
Les zones, bâtiments et autres principaux éléments, qui sont construits sur une ou plusieurs cases de la grille, seront représentés par des
rectangles colorés, avec affichage nominatif.

La version alpha sera l’implémentation minimale du jeu.


« Quels sont les problèmes ? »


Le problème majeur du projet concerne l’extensibilité du système.  

En effet, la difficulté sera de pouvoir rajouter des objets nouveaux dans l’architecture du projet sans devoir forcément remanier le code source. 
De même pour l’interface du projet, tous les nouveaux objets devront être rajoutés sans effort, au schéma existant.

Un autre problème apparaît dans la conception. 

En effet, chaque objet (bâtiment,zone..) est supposé pouvoir échanger des informations avec la « fenêtre » dans laquelle il est contenu (retour utilisateur) (ex : trop de pollution). 

 
Ce qui va se passer, c’est qu’une classe va déclencher l’éxecution d’une ou de plusieurs classes.

Ainsi, pour gérer ce phénomène, on va devoir utiliser des observateurs et des (objets) observables de manière à coupler les différents modules
tout en réduisant les dépendances aux seules exécutions observées.

Par chance, il existe un design pattern appelé « Observateur » permettant de résoudre les problèmes énoncés plus haut.

En particulier, on utilise ce patron de conception pour envoyer un signal à des modules qui jouent le rôle d’observateurs. 

En cas de notification, les observateurs effectuent l’action adéquate en fonction des informations qui parviennent depuis les modules qu’ils 
observent (dits les « observables »).

Plus simplement, c’est par ce biais que nos composants effectueront quelque chose lorsqu’on cliquera dessus ou qu’on les survolerera.


Dans notre cas, nous allons devoir définir une classe (« The Boss ») qui jouera le rôle d’observateur, et qui observera toutes les classes objets définis précédemment, à savoir les zones, les bâtiments, les connecteurs, les taux et les effets.

Ces dernières joueront donc le rôle d’observable. Leur but étant de tenir informé la classe observateur de tout changement de valeur. 






Pour montrer l’importance de ce design pattern, raisonnons par l’absurde : 

On imagine la réalisation du jeu sans le design pattern Observer. 

En effet, la classe (« The Boss ») doit être informée en temps réel des changements de valeurs de chacun des modules, donc elle doit aller 
récupérer les nouvelles valeurs et ce, à chaque changement. De plus, quand est-ce que la classe « The Boss » devra elle récupérer ces informations ? Toutes les heures ? Toutes les minutes ? 
Quelque soit l’intervalle choisi, soient les données ne seront pas à jour, soit on surchargera la classe « The Boss » d’appels inutiles.

La solution consiste donc à laisser la charge aux classes objets d’informer la classe « The Boss » de ses changements de valeurs.


Edit : 

Les modules ne font rien d’eux-même, et c’est l’observateur qui va induire les changements.




(

Observer fait communiquer des objets entre eux sans pour autant qu’ils se connaissent.
(lien StackOverFlow : http://stackoverflow.com/questions/13435151/implementing-observer-pattern)
(lien SdZ : http://fr.openclassrooms.com/informatique/cours/apprenez-a-programmer-en-java/etre-a-l-ecoute-de-ses-objets-le-design-pattern-observer)

) 








————————————————————————————————————————————

 



 







